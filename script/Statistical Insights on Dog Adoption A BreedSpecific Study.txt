library(ggplot2)
library(moments)
library(gridExtra)
split_data <- split(cleaned_mysample, cleaned_mysample$Breed)
summary <- list()
for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  
  rehoming_time <- breed_data$Rehomed  
  
  
  mean_val <- mean(rehoming_time)
  var_val <- var(rehoming_time)
  sd_val <- sd(rehoming_time)
  skewness_val <- skewness(rehoming_time)
  cat("Breed:", breed, "\n")
  cat("Mean Rehoming Time:", mean_val, "\n")
  cat("Variance:", var_val, "\n")
  cat("Standard Deviation:", sd_val, "\n")
  cat("Skewness:", skewness_val, "\n\n")
  summary[[breed]] <- c(Breed = breed, Mean = mean_val, Variance = var_val, SD = sd_val, Skewness = skewness_val)
  

}
summary_df <- do.call(rbind, summary)
print(summary_df)
histogram_plots <- list()

for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  # Extract the breed name
  rehoming_time <- breed_data$Rehomed  # Extract rehoming time data for the breed
  
  # Create histogram for each breed
  histogram <- ggplot(data = breed_data, aes(x = Rehomed)) +
    geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
    labs(title = paste("Rehoming Time Histogram for", breed),x = "Rehoming Time",y = "Frequency")
  histogram_plots[[breed]] <- histogram
}
grid.arrange(grobs = histogram_plots, ncol = 2)

  
  
 # Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Split the data by breed
split_data <- split(cleaned_mysample, cleaned_mysample$Breed)

# Initialize an empty list to store summary statistics
summary_stats <- list()

# Loop through each breed and calculate summary statistics
for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  # Extract the breed name
  
  # Calculate summary statistics for health and age
  health_stats <- summarise(breed_data, Mean_Health = mean(Health), SD_Health = sd(Health))
  age_stats <- count(breed_data, Age)
  reason_stats <- count(breed_data, Reason)
  
  # Print or store the results as needed
  cat("Breed:", breed, "\n")
  cat("Health Statistics:\n", summary(health_stats), "\n")
  cat("Age Statistics:\n", summary(age_stats), "\n")
  cat("Reason Statistics:\n", summary(reason_stats), "\n\n")
  
  # Store results in the summary_stats list
  summary_stats[[breed]] <- list(Breed = breed, Health = health_stats, Age = age_stats, Reason = reason_stats)
}

# Combine the summaries into a data frame
summary_df <- do.call(rbind, summary_stats)

# Print the summary_df
print(summary_df)

# Compare health across breeds
ggplot(summary_df, aes(x = Breed, y = Health$Mean_Health)) + geom_col(position = "dodge", fill = "skyblue") + labs(title = "Mean Health Comparison Across Breeds", x = "Breed", y = "Mean Health")

# Compare age across breeds
ggplot(summary_df, aes(x = Breed, y = Age$n, fill = Age$Age)) +  geom_col(position = "dodge") +  labs(title = "Age Distribution Comparison Across Breeds", x = "Breed", y = "Count", fill = "Age")

# Compare reasons across breeds
ggplot(summary_df, aes(x = Breed, y = Reason$n, fill = Reason$Reason)) +  geom_col(position = "dodge") +  labs(title = "Reason Distribution Comparison Across Breeds", x = "Breed", y = "Count", fill = "Reason")

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Split the data by breed
split_data <- split(cleaned_mysample, cleaned_mysample$Breed)

# Initialize an empty list to store health statistics
health_stats_list <- list()

# Loop through each breed and calculate health statistics
for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  # Extract the breed name
  
  # Calculate health statistics
  health_stats <- summarise(breed_data, Mean_Health = mean(Health), SD_Health = sd(Health))
  
  # Print or store the results as needed
  cat("Breed:", breed, "\n")
  cat("Health Statistics:\n", summary(health_stats), "\n\n")
  
  # Store results in the health_stats_list
  health_stats_list[[breed]] <- data.frame(Breed = breed, Health = health_stats$Mean_Health, SD_Health = health_stats$SD_Health)
}

# Combine the health statistics into a data frame
health_stats_df <- do.call(rbind, health_stats_list)

# Print the health_stats_df
print(health_stats_df)

# Compare health across breeds
basic_plot <- ggplot(health_stats_df) +
  geom_col(position = "dodge", fill = "skyblue")

aesthetic_plot <- basic_plot +
  aes(x = Breed, y = Health)
final_plot <- aesthetic_plot +
  labs(title = "Mean Health Comparison Across Breeds", x = "Breed", y = "Mean Health")

print(final_plot)

# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(moments)
library(gridExtra)

# Split the data by breed
split_data <- split(cleaned_mysample, cleaned_mysample$Breed)

# Initialize an empty list to store age statistics
age_stats_list <- list()

# Loop through each breed and calculate age statistics
for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  # Extract the breed name
  
  # Calculate age statistics
  age_stats <- count(breed_data, Age)
  
  # Print or store the results as needed
  cat("Breed:", breed, "\n")
  cat("Age Statistics:\n", summary(age_stats), "\n\n")
  
  # Store results in the age_stats_list
  age_stats_list[[breed]] <- list(Breed = breed, Age = age_stats)
}

# Combine the age statistics into a data frame
age_stats_df <- do.call(rbind, age_stats_list)

# Print the age_stats_df
print(age_stats_df)

for (breed_data in split_data) {
  breed <- breed_data$Breed[1]  # Extract the breed name
  
  # Calculate age statistics using table()
  age_stats <- table(breed_data$Age)
  
  # Print or store the results as needed
  cat("Breed:", breed, "\n")
  cat("Age Statistics:\n", age_stats, "\n\n")
  
  # Store results in the age_stats_list
  age_stats_list[[breed]] <- data.frame(Breed = breed, Age = names(age_stats), Count = as.numeric(age_stats))
}

# Combine the age statistics into a data frame
age_stats_df <- do.call(rbind, age_stats_list)

# Print the age_stats_df
print(age_stats_df)

# Compare age across breeds
ggplot(age_stats_df) +
  geom_bar(stat = "identity", position = "dodge")

ggplot(age_stats_df, aes(x = Breed, y = Count)) +
  geom_bar(stat = "identity", position = "dodge")

ggplot(age_stats_df, aes(x = Breed, y = Count, fill = Age)) +
  geom_bar(stat = "identity", position = "dodge")
library(MASS)

split_data_B1 <- split(cleaned_mysample, cleaned_mysample$Breed)

for (breed_data in split_data_B1) {
  cat("Breed Data Structure:\n")
  str(breed_data)
  cat("\n")
}

# Extract data for Breed 1
data_breed1 <- cleaned_mysample[cleaned_mysample$Breed == "Staffordshire Bull Terrier", ]

# Fit Normal Distribution
fit_normal <- fitdistr(data_breed1$Rehomed, "normal")

# Display estimated parameters
cat("Estimated Mean:", fit_normal$estimate[1], "\n")
cat("Estimated Standard Deviation:", fit_normal$estimate[2], "\n")

# Visualize the fit
hist(data_breed1$Rehomed, probability = TRUE, col = "lightblue", main = "Normal Distribution Fit for Breed 3")
curve(dnorm(x, mean = fit_normal$estimate[1], sd = fit_normal$estimate[2]), add = TRUE, col = "red", lwd = 2)
library(MASS)
data_breed1 <- cleaned_mysample[cleaned_mysample$Breed == "Labrador Retriever", ]
data_breed2 <- cleaned_mysample[cleaned_mysample$Breed == "Rottweiler", ]
data_breed3 <- cleaned_mysample[cleaned_mysample$Breed == "Staffordshire Bull Terrier", ]
# Function to fit and visualize distribution for a breed
fit_and_visualize <- function(data, breed_name, distribution) {
  # Extract rehoming time for the specified breed
  rehoming_time <- as.numeric(data$Rehomed)
  
  # Fit the specified distribution
  fit <- fitdistr(rehoming_time, distribution)
  
  # Display estimated parameters
  cat("Breed:", breed_name, "\n")
  cat("Distribution:", distribution, "\n")
  cat("Estimated Rate (lambda):", fit$estimate[1], "\n\n")
  
  # Visualize the fit
  hist(rehoming_time, probability = TRUE, col = "lightblue", main = paste(distribution, "Distribution Fit for", breed_name))
  curve(dexp(x, rate = fit$estimate[1]), add = TRUE, col = "red", lwd = 2)
}

# Fit and visualize Exponential Distribution for each breed
fit_and_visualize(data_breed1, "Labrador Retriever", "exponential")
fit_and_visualize(data_breed2, "Rottweiler", "exponential")
fit_and_visualize(data_breed3, "Staffordshire Bull Terrier", "exponential")

library(MASS)

# Function to fit and visualize distribution for a breed
fit_and_visualize <- function(data, breed_name, distribution) {
  # Extract rehoming time for the specified breed
  rehoming_time <- as.numeric(data$Rehomed)
  
  # Fit the specified distribution
  fit <- fitdistr(rehoming_time, distribution)
  
  # Display estimated parameters
  cat("Breed:", breed_name, "\n")
  cat("Distribution:", distribution, "\n")
  cat("Estimated Lambda (rate):", fit$estimate[1], "\n\n")
  
  # Visualize the fit
  hist(rehoming_time, probability = TRUE, col = "lightblue", main = paste(distribution, "Distribution Fit for", breed_name))
  curve(dpois(x, lambda = fit$estimate[1]), add = TRUE, col = "red", lwd = 2)
}

# Fit and visualize Poisson Distribution for each breed
fit_and_visualize(data_breed1, "Labrador Retriever", "poisson")
fit_and_visualize(data_breed2, "Rottweiler", "poisson")
fit_and_visualize(data_breed3, "Staffordshire Bull Terrier", "poisson")

data_breed3$Rehomed <- as.numeric(data_breed3$Rehomed)
mu_hat <- mean(data_breed3$Rehomed, na.rm = TRUE)
sigma_hat <- sd(data_breed3$Rehomed)

# Exponential Distribution
lambda_hat_exp <- 1 / mean(data_breed3$Rehomed, na.rm = TRUE)

# Poisson Distribution
lambda_hat_poisson <- mean(data_breed3$Rehomed, na.rm = TRUE)

# Display estimated parameters
cat("Normal Distribution Parameters:\n")
cat("Estimated Mean (μ):", mu_hat, "\n")
cat("Estimated Standard Deviation (σ):", sigma_hat, "\n\n")

cat("Exponential Distribution Parameters:\n")
cat("Estimated Rate (λ):", lambda_hat_exp, "\n\n")

cat("Poisson Distribution Parameters:\n")
cat("Estimated Lambda (λ):", lambda_hat_poisson, "\n")

numeric_data <- data_breed1$Rehomed
ecdf_function <- ecdf(numeric_data)
test_values <- seq(min(numeric_data), max(numeric_data), length.out = 100)
observed_cdf <- ecdf_function(test_values)
ks_test_result <- ks.test(test_values, "pnorm", mean = mean(numeric_data), sd = sd(numeric_data))
print(ks_test_result)# Assuming 'data_breed1', 'data_breed2', and 'data_breed3' are data frames for each breed
# The column 'Rehomed' contains the rehoming time data

# Function to calculate the confidence interval
calculate_ci <- function(data, mean_value) {
  n <- length(data)
  se <- sd(data) / sqrt(n)
  margin_of_error <- qt(0.975, df = n - 1) * se
  ci_lower <- mean(data) - margin_of_error
  ci_upper <- mean(data) + margin_of_error
  
  return(c(ci_lower, ci_upper))
}

# Calculate confidence intervals for each breed
ci_breed1 <- calculate_ci(data_breed1$Rehomed, mean_value = 27)
ci_breed2 <- calculate_ci(data_breed2$Rehomed, mean_value = 27)
ci_breed3 <- calculate_ci(data_breed3$Rehomed, mean_value = 27)

# Create a table
results_table <- data.frame(
  Breed = c("Breed 1", "Breed 2", "Breed 3"),
  Mean_Rehoming_Time = c(mean(data_breed1$Rehomed), mean(data_breed2$Rehomed), mean(data_breed3$Rehomed)),
  Confidence_Interval_Lower = c(ci_breed1[1], ci_breed2[1], ci_breed3[1]),
  Confidence_Interval_Upper = c(ci_breed1[2], ci_breed2[2], ci_breed3[2]),
  stringsAsFactors = FALSE
)

# Print the results
print(results_table)

# Function to perform one-sample z-test
perform_z_test <- function(data, hypothesized_mean, population_sd) {
  test_result <- z.test(data, mu = hypothesized_mean, sigma.x = population_sd)
  return(test_result)
}

# Breed 1
z_test_result_breed1 <- perform_z_test(data_breed1$Rehomed, hypothesized_mean = 27, population_sd = 10.11011)
print("Breed 1:")
print(z_test_result_breed1)

# Breed 2
z_test_result_breed2 <- perform_z_test(data_breed2$Rehomed, hypothesized_mean = 27, population_sd = 6.435155)
print("Breed 2:")
print(z_test_result_breed2)

# Breed 3
z_test_result_breed3 <- perform_z_test(data_breed3$Rehomed, hypothesized_mean = 27, population_sd = 10.53207)
print("Breed 3:")
print(z_test_result_breed3)sample_sd <- sd(data_breed3$Rehomed)

# Calculate estimated population standard deviation
population_sd_estimate <- sample_sd * sqrt((length(data_breed3$Rehomed) - 1) / length(data_breed3$Rehomed))

# Print results
cat("Sample Standard Deviation (s):", sample_sd, "\n")
cat("Estimated Population Standard Deviation (σ):", population_sd_estimate, "\n")library(gridExtra)
library(grid)
results_table <- data.frame(
  Breed = c(1, 1, 2, 2, 3, 3),
  Test_Type = c("z-Test", "t-Test", "z-Test", "t-Test", "z-Test", "t-Test"),
  Statistic = c(-4.9223, -4.8797, -23.356, -23.213, -10.431, -10.405),
  P_Value = c(8.553e-07, 8.928e-06, "< 2.2e-16", "< 2.2e-16", "< 2.2e-16", "< 2.2e-16"),
  Confidence_Interval_Lower = c(17.86362, 17.78398, 9.009602, 8.979779, 17.70187, 17.68897),
  Confidence_Interval_Upper = c(23.06741, 23.14705, 11.795276, 11.825099, 20.64330, 20.65621),
  Sample_Mean = c(20.46552, 20.46552, 10.40244, 10.40244, 19.17259, 19.17259)
)

# Convert the data frame to a table
table_grob <- tableGrob(results_table)

# Display the table using grid.draw
grid.draw(table_grob)breed1_rehomed <- data_breed2$Rehomed
breed3_rehomed <- data_breed3$Rehomed

# Assume equal variances for the pooled approach
pooled_var <- (var(breed2_rehomed) + var(breed3_rehomed)) / 2

# Calculate the confidence interval for the difference in means
conf_interval <- t.test(breed2_rehomed, breed3_rehomed, var.equal = TRUE, conf.level = 0.95)

# Print the results
print(conf_interval)

means <- c(20.46552, 10.40244, 19.17259)
breeds <- c("Breed 1", "Breed 2", "Breed 3")
ci_width <- c(2.601895,1.392837,1.470715)  # Placeholder values, replace with your actual half-widths

# Bar plot with error bars
barplot(means, names.arg = breeds, ylim = c(0, 30), col = "skyblue",
        main = "Mean Rehoming Time by Breed",
        xlab = "Breed", ylab = "Mean Rehoming Time (weeks)")

# Add error bars
arrows(seq_along(breeds), means - ci_width, seq_along(breeds), means + ci_width,
       angle = 90, code = 3, length = 0.1, col = "red")
  distribution_data <- data.frame(
  Breed = c("Labrador Retriever", "Rottweiler", "Staffordshire Bull Terrier"),
  Mean = c(10.40244, 10.40244, 19.17259),
  SD = c(6.435155, 6.435155, 10.53207),
  Lambda_Exponential = c(0.04886268, 0.0961313, 0.0521578),
  Lambda_Poisson = c(20.46552, 10.40244, 19.17259)
)

# Print the table
print(distribution_data)

 
  